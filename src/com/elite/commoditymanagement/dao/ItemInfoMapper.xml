<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.elite.commoditymanagement.dao.ItemInfoMapper">
	<resultMap id="BaseResultMap" type="com.elite.commoditymanagement.bean.ItemInfo">
		<id column="item_id" property="itemId" jdbcType="VARCHAR" />
		<result column="item_name" property="itemName" jdbcType="VARCHAR" />
		<result column="item_pic" property="itemPic" jdbcType="VARCHAR" />
		<result column="cata_name" property="cataName" jdbcType="VARCHAR" />
		<result column="retail_price" property="retailPrice" jdbcType="DOUBLE" />
		<result column="import_price" property="importPrice" jdbcType="DOUBLE" />
		<result column="stocks" property="stocks" jdbcType="BIGINT" />
		<result column="unit_name" property="unitName" jdbcType="VARCHAR" />
		<result column="supp_name" property="suppName" jdbcType="VARCHAR" />
		<result column="supp_id" property="suppId" jdbcType="VARCHAR" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="contact_person" property="contactPerson" jdbcType="VARCHAR" />
		<result column="note" property="note" jdbcType="VARCHAR" />
		<result column="safe_amount" property="safeAmount" jdbcType="BIGINT" />
  </resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<sql id="Base_Column_List">
		item_id, item_name, item_pic, cata_name, retail_price,
		stocks, unit_name,supp_name, supp_id, phone, contact_person, note, safe_amount
	</sql>
	
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.elite.commoditymanagement.bean.ItemInfoExample">
		select
		<include refid="Base_Column_List" />
			from
			(select distinct
			tbl_items.item_id AS item_id,
			tbl_items.item_name AS item_name,
			tbl_items.item_pic AS item_pic,
			tbl_catagorgy.catagorgy_name AS
			cata_name,
			tbl_items.retail_price AS retail_price,
			(IFNULL(`tbl_import_bill`.`import_price`,0)) AS import_price,
			((IFNULL(`tbl_import_bill`.`import_amount`,0)) -
			(IFNULL(`tbl_export_bill`.`export_amount`,0))) AS stocks,
			tbl_suppliers.supp_name AS supp_name,
			tbl_export_bill.supp_id AS
			supp_id,
			tbl_suppliers.phone AS phone,
			tbl_suppliers.contact_person AS
			contact_person,
			tbl_unit.unit_name AS unit_name,
			tbl_items.note AS note,
			tbl_items.safe_amount AS safe_amount
			from (((((`tbl_items` left join `tbl_import_bill`
			on((`tbl_items`.`item_id`
			= `tbl_import_bill`.`item_id`))) left join
			`tbl_export_bill`
			on((`tbl_import_bill`.`item_id` =
			`tbl_export_bill`.`item_id`))) join
			`tbl_suppliers`) join `tbl_unit`)
			join `tbl_catagorgy`)
			where ((`tbl_items`.`supp_id` =
			`tbl_suppliers`.`supp_id`) and
			(`tbl_items`.`unit_id` =
			`tbl_unit`.`unit_id`) and
			(`tbl_items`.`catagorgy_id` =
			`tbl_catagorgy`.`catagorgy_id`))) AS itemview
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>	
	
	<select id="selectByView" resultMap="BaseResultMap">
		select DISTINCT
		tbl_items.item_id AS item_id,
		tbl_items.item_name AS item_name,
		tbl_items.item_pic AS item_pic,
		tbl_catagorgy.catagorgy_name AS cata_name,
		tbl_items.retail_price AS retail_price,
		(IFNULL(`tbl_import_bill`.`import_price`,0)) AS import_price,
		((IFNULL(`tbl_import_bill`.`import_amount`,0)) - (IFNULL(`tbl_export_bill`.`export_amount`,0))) AS stocks,
		tbl_suppliers.supp_name AS supp_name,
		tbl_export_bill.supp_id AS supp_id,
		tbl_suppliers.phone AS phone,
		tbl_suppliers.contact_person AS contact_person,
		tbl_unit.unit_name AS unit_name,
		tbl_items.note AS note,
		tbl_items.safe_amount AS safe_amount
		from (((((`tbl_items` left join `tbl_import_bill` on((`tbl_items`.`item_id`
		= `tbl_import_bill`.`item_id`))) left join `tbl_export_bill`
		on((`tbl_import_bill`.`item_id` = `tbl_export_bill`.`item_id`))) join
		`tbl_suppliers`) join `tbl_unit`) join `tbl_catagorgy`)
		where ((`tbl_items`.`supp_id` = `tbl_suppliers`.`supp_id`) and
		(`tbl_items`.`unit_id` = `tbl_unit`.`unit_id`) and
		(`tbl_items`.`catagorgy_id` = `tbl_catagorgy`.`catagorgy_id`))
		order by
		stocks
	</select>

</mapper>